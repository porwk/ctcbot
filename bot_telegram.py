import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# Configura√ß√£o do logging para rastrear eventos e erros
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Constantes para os nomes das categorias (√© poss√≠vel futuramente carregar isso de uma DB)
CATEGORIES = [
    "Cancelamento", "Conectar_max", "Los", "Transferencia_endereco", "App_sette"
]

# Flag para controlar se o bot est√° ativo ou n√£o
BOT_ATIVO = True  # Defina como True para ativar o bot

# Fun√ß√£o para carregar os scripts (simulada aqui, mas poderia ser de um banco de dados)
def load_scripts():
    try:
        from scripts import scripts
        return scripts
    except ImportError:
        logger.error("‚ùå N√£o foi poss√≠vel carregar o arquivo 'scripts.py'. Verifique se o arquivo existe.")
        return {}

# Fun√ß√£o de resposta em caso de erro para evitar duplica√ß√£o de c√≥digo
def script_not_found_message():
    return "‚ùå Script n√£o encontrado! Certifique-se de que o nome est√° correto."

# Fun√ß√£o para lidar com o comando /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.from_user.first_name  # Obtendo o nome do usu√°rio
    welcome_text = (
        f"üëã Ol√°, {user_name}! Seja muito bem-vindo ao **Assistente Virtual** do Contact Center. üåü\n\n"
        "üîß Estou aqui para facilitar sua jornada! Comigo, voc√™ pode acessar scripts de forma r√°pida e pr√°tica, e assim, otimizar seu atendimento. üí¨\n\n"
        "üìö Para come√ßar, digite o comando `/script` seguido do nome do script ou da categoria que voc√™ deseja explorar. Se precisar de ajuda, n√£o hesite em me chamar!\n\n"
        "üí° E lembre-se: sua opini√£o √© muito importante! Se tiver sugest√µes ou feedbacks, compartilhe comigo e ajude a melhorar nossa experi√™ncia juntos. üöÄ\n\n"
        "üîò Agora, escolha uma das op√ß√µes abaixo para come√ßar a explorar os scripts. Eu estou √† disposi√ß√£o para ajudar no que for preciso!"
    )

    # Criando os bot√µes inline
    inline_keyboard = [
        [InlineKeyboardButton(category.capitalize(), callback_data=category)] 
        for category in CATEGORIES
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard)

    # Enviando mensagem com os bot√µes inline
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

# Fun√ß√£o para lidar com o comando /script
async def get_script(update: Update, context: ContextTypes.DEFAULT_TYPE):
    scripts = load_scripts()  # Carregar os scripts do arquivo 'scripts.py'
    
    # Verificar se o nome do script foi fornecido
    if context.args:
        script_name = context.args[0].lower()  # Normalizar para evitar problemas de mai√∫sculas/min√∫sculas
        script = scripts.get(script_name, script_not_found_message())
        await update.message.reply_text(script)
    else:
        script_list_text = (
            "‚ö†Ô∏è Por favor, forne√ßa o nome do script. Exemplo: /script script1\n\n"
            "üîπ Scripts dispon√≠veis:\n"
        )
        
        # Organiza os bot√µes em duas colunas
        script_keys = list(scripts.keys())
        keyboard = [
            [InlineKeyboardButton(script_keys[i].capitalize(), callback_data=script_keys[i]),
             InlineKeyboardButton(script_keys[i+1].capitalize(), callback_data=script_keys[i+1])] 
            for i in range(0, len(script_keys)-1, 2)
        ]

        # Se houver um n√∫mero √≠mpar de scripts, adiciona o √∫ltimo bot√£o sozinho
        if len(script_keys) % 2 != 0:
            keyboard.append([InlineKeyboardButton(script_keys[-1].capitalize(), callback_data=script_keys[-1])])

        script_list_text += "üîπ Clique abaixo para visualizar os scripts:\n"
        await update.message.reply_text(script_list_text, reply_markup=InlineKeyboardMarkup(keyboard))

# Fun√ß√£o para tratar os cliques nos bot√µes
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    script_name = query.data.lower()  # Normalizar para evitar problemas de mai√∫sculas/min√∫sculas
    
    scripts = load_scripts()
    script = scripts.get(script_name, script_not_found_message())  # Usar a fun√ß√£o para resposta de erro
    
    await query.answer()  # Responder ao clique
    await query.edit_message_text(text=script)

# Fun√ß√£o principal para iniciar o bot
def main():
    # Testando o carregamento da vari√°vel de ambiente
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("‚ùå Token do bot n√£o encontrado. Configure a vari√°vel de ambiente 'TELEGRAM_BOT_TOKEN'.")
        return
    else:
        logger.info("‚úÖ Token carregado com sucesso!")

    # Cria√ß√£o da aplica√ß√£o do bot
    application = Application.builder().token(token).build()

    # Configura√ß√£o dos comandos
    application.add_handler(CommandHandler("start", start))  # Comando /start
    application.add_handler(CommandHandler("script", get_script))  # Comando /script <nome_do_script>
    application.add_handler(CallbackQueryHandler(button))  # Resposta aos bot√µes clic√°veis

    # Inicia o bot em modo polling
    logger.info("‚úÖ Bot iniciado com sucesso!")
    application.run_polling()

if __name__ == "__main__":
    main()
